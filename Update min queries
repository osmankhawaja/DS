#include<bits/stdc++.h>
using namespace std;
 
#define endl "\n"
#define int long long
 
const int N=1e6;
int n, q;
int seg[N];
 
void build(int ind, int low, int high, int arr[])
{
    if(low == high)
    {
        seg[ind]=arr[low];
        return ;
    }
    int mid=(low+high)/2;
    build(2*ind +1, low, mid, arr);
    build(2*ind +2, mid+1, high, arr);
 
    seg[ind]=min(seg[2*ind +1] , seg[2*ind +2]);
}
 
int query(int ind, int low, int high, int l, int r)
{
    //no overlap
    if(r < low || l > high) return INT_MAX;
 
    //complete overlap
     if(l <= low && r >= high) return seg[ind];
 
    //partial overlap
    int mid=(low + high)/2;
    int left=query(2*ind +1, low, mid, l, r);
    int right=query(2*ind +2, mid+1, high, l, r);
    return min(left , right);
}
 
void update(int ind, int low, int high, int i, int val)
{
    if(low == high)
    {
        seg[ind]=val;
        return;
    }
    int mid=(low + high)/2;
    if(i <= mid)
    {
        update(2*ind +1, low, mid, i, val);
    }
    else
    {
        update(2*ind +2, mid+1, high, i, val);
    }
    seg[ind]=min(seg[2*ind +1] , seg[2*ind +2]);
}
 
int32_t main()
{
    // int n,q;
    cin>>n>>q;
    int arr[n+5];
    for(int i=0; i<n; i++) cin>>arr[i];
 
    build(0, 0, n-1, arr);
    while(q--)
    {
        int a;
        cin>>a;
        if(a == 2)
        {
            int l,r;
            cin>>l>>r;
            cout<<query(0, 0, n-1, l-1, r-1)<<endl;
        }
        else
        {
            int i, val;
            cin>>i>>val;
            update(0, 0, n-1, i-1, val);
        }
    }
}
